---
title: DT
author: ''
date: 2022-10-15
---

```{r setup, include=FALSE, message=FALSE, warning=FALSE}
library(widgetframe)
library(tidyquant)
library(jsonlite)
library(maptools)
library(ggplot2)
library(tidyr)
library(dplyr)
library(purrr)
library(leaflet)
library(plotly)
library(forecast)
library(treemap)
library(DT)
library(highcharter)


sites <- fromJSON(flatten=TRUE,
  "https://raw.githubusercontent.com/52vis/2016-15/ec4b0ef/sites.json")

sites$locations <- map(sites$locations, function(x) {
  if (nrow(x) == 0) {
    tibble(latitude=NA, longitude=NA, postal_code=NA, name=NA, street_address=NA)
  } else {
    x
  }
})

sites <- unnest(sites)
sites <- sites[complete.cases(sites[,c("longitude", "latitude")]),]

sites$ratingcol <- ifelse(sites$site.rating == 0, "orange",
                          ifelse(sites$site.rating == 1, "green",
                                 ifelse(sites$site.rating == 2, "red", "black")))

sites$ratingf <- factor(sites$site.rating,
                        levels=c(3:0),
                        labels=c("Remote or no potential for radioactive contamination.",
                                 "No authority to clean up or status unclear.",
                                 "Cleanup declared complete.",
                                 "Cleanup in progress."))

sites$campus <- ifelse(grepl("University", sites$site.name) | 
                       grepl("University", sites$street_address) | 
                       grepl("Campus", sites$street_address), 1, 0)
sites$campuscol <- ifelse(sites$campus == 1, "red", "black")
```

### Chart A

```{r, echo=FALSE, message=FALSE, warning=FALSE}

theme_set(cowplot::theme_cowplot())
tidyquant::tq_get(x = c("AAPL", "GOOG"), 
                  get = "stock.prices", 
                  from = "1950-01-01") %>% arrange(date) %>% 
  ggplot(aes(date, close, fill = symbol, color = symbol)) +
  geom_area(alpha = .7, color = "black", size = .2) +
  geom_smooth(se = T, size = 1.5) +
  scale_x_date(limits = c(as.Date("2004-01-01"), as.Date("2022-09-01"))) +
  scale_fill_viridis_d(option = "cividis") -> p1

plotly::ggplotly(p1)
```

### Chart B

```{r, echo=FALSE, message=FALSE, warning=FALSE}
AirPassengers %>% 
  forecast(level = 90) %>% 
  hchart() -> hchart

widgetframe::frameWidget(hchart)
```

### Map

```{r, echo=FALSE, message=FALSE, warning=FALSE}
leaflet() %>% 
  addTiles() %>% 
  fitBounds(-127.44,24.05,-65.30,50.35) %>% 
  addCircleMarkers(sites$longitude, 
                   sites$latitude, 
                   color = sites$ratingcol, 
                   radius = 6, 
                   fill = T,
                   fillOpacity = 0.2,
                   opacity = 0.6,
                   popup = paste(sites$site.city,
                                 sites$site.name, 
                                 sep = "")) %>%
  addLegend("bottomleft", 
            colors = c("orange","green", "red", "black"),
            labels = c("Cleanup in progress.",
                       "Cleanup complete.",
                       "Status unclear.",
                       "No potential for radioactive contamination."), 
            opacity = 0.8)
```


### MPG Data

```{r, echo=FALSE, message=FALSE, warning=FALSE}
DT::datatable(
  mpg, extensions = c('Responsive','Buttons'), options = list(
    autowidth = T,
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
  )
) -> data

widgetframe::frameWidget(data)

```

